<?xml version="1.0" encoding="UTF-8"?>
<results version="2">
    <cppcheck version="1.72"/>
    <errors>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;::ReturnZeroFromNullaryFunctionAction::Perform&apos; can be static." verbose="The member function &apos;::ReturnZeroFromNullaryFunctionAction::Perform&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="test/gtest/src/gtest/googlemock/test/gmock-actions_test.cc" line="488"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;::Base::operator==&apos; can be const." verbose="The member function &apos;::Base::operator==&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="test/gtest/src/gtest/googlemock/test/gmock-actions_test.cc" line="568"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;::Derived::operator==&apos; can be const." verbose="The member function &apos;::Derived::operator==&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="test/gtest/src/gtest/googlemock/test/gmock-actions_test.cc" line="572"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;::SourceType::operatorDestinationType&apos; can be const." verbose="The member function &apos;::SourceType::operatorDestinationType&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="test/gtest/src/gtest/googlemock/test/gmock-actions_test.cc" line="623"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;::NullaryFunctor::operator()&apos; can be const." verbose="The member function &apos;::NullaryFunctor::operator()&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="test/gtest/src/gtest/googlemock/test/gmock-actions_test.cc" line="1109"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;::VoidNullaryFunctor::operator()&apos; can be const." verbose="The member function &apos;::VoidNullaryFunctor::operator()&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="test/gtest/src/gtest/googlemock/test/gmock-actions_test.cc" line="1117"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;IntegerVectorWrapper&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;IntegerVectorWrapper&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="test/gtest/src/gtest/googlemock/test/gmock-actions_test.cc" line="549"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ToType&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ToType&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="test/gtest/src/gtest/googlemock/test/gmock-actions_test.cc" line="603"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;testing::gmock_generated_actions_test::NullaryFunctor::operator()&apos; can be const." verbose="The member function &apos;testing::gmock_generated_actions_test::NullaryFunctor::operator()&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="test/gtest/src/gtest/googlemock/test/gmock-generated-actions_test.cc" line="75"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;testing::gmock_generated_actions_test::UnaryFunctor::operator()&apos; can be const." verbose="The member function &apos;testing::gmock_generated_actions_test::UnaryFunctor::operator()&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="test/gtest/src/gtest/googlemock/test/gmock-generated-actions_test.cc" line="92"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;testing::gmock_generated_actions_test::SumOf5Functor::operator()&apos; can be const." verbose="The member function &apos;testing::gmock_generated_actions_test::SumOf5Functor::operator()&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="test/gtest/src/gtest/googlemock/test/gmock-generated-actions_test.cc" line="113"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;testing::gmock_generated_actions_test::SumOf6Functor::operator()&apos; can be const." verbose="The member function &apos;testing::gmock_generated_actions_test::SumOf6Functor::operator()&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="test/gtest/src/gtest/googlemock/test/gmock-generated-actions_test.cc" line="128"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Derived::i&apos; is not initialized in the constructor." verbose="Member variable &apos;Derived::i&apos; is not initialized in the constructor.">
            <location file="test/gtest/src/gtest/googlemock/test/gmock-matchers_test.cc" line="817"/>
        </error>
        <error id="noConstructor" severity="style" msg="The class &apos;DerivedClass&apos; does not have a constructor." verbose="The class &apos;DerivedClass&apos; does not have a constructor although it has private member variables. Member variables of builtin types are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior.">
            <location file="test/gtest/src/gtest/googlemock/test/gmock-matchers_test.cc" line="4108"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SampleVariantIntString::i_&apos; is not initialized in the constructor." verbose="Member variable &apos;SampleVariantIntString::i_&apos; is not initialized in the constructor.">
            <location file="test/gtest/src/gtest/googlemock/test/gmock-matchers_test.cc" line="6550"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;SampleAnyType::i_&apos; is not initialized in the constructor." verbose="Member variable &apos;SampleAnyType::i_&apos; is not initialized in the constructor.">
            <location file="test/gtest/src/gtest/googlemock/test/gmock-matchers_test.cc" line="6614"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &apos;SampleVariantIntString::get_impl&apos;" verbose="Unused private function: &apos;SampleVariantIntString::get_impl&apos;">
            <location file="test/gtest/src/gtest/googlemock/test/gmock-matchers_test.cc" line="6563"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &apos;SampleVariantIntString::get_impl&apos;" verbose="Unused private function: &apos;SampleVariantIntString::get_impl&apos;">
            <location file="test/gtest/src/gtest/googlemock/test/gmock-matchers_test.cc" line="6564"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &apos;SampleAnyType::get_impl&apos;" verbose="Unused private function: &apos;SampleAnyType::get_impl&apos;">
            <location file="test/gtest/src/gtest/googlemock/test/gmock-matchers_test.cc" line="6626"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &apos;SampleAnyType::get_impl&apos;" verbose="Unused private function: &apos;SampleAnyType::get_impl&apos;">
            <location file="test/gtest/src/gtest/googlemock/test/gmock-matchers_test.cc" line="6627"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;testing::gmock_matchers_test::ReferencesBarOrIsZeroImpl::MatchAndExplain&apos; can be static." verbose="The member function &apos;testing::gmock_matchers_test::ReferencesBarOrIsZeroImpl::MatchAndExplain&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="test/gtest/src/gtest/googlemock/test/gmock-matchers_test.cc" line="532"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;testing::gmock_matchers_test::ReferencesBarOrIsZeroImpl::DescribeTo&apos; can be static." verbose="The member function &apos;testing::gmock_matchers_test::ReferencesBarOrIsZeroImpl::DescribeTo&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="test/gtest/src/gtest/googlemock/test/gmock-matchers_test.cc" line="538"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;testing::gmock_matchers_test::ReferencesBarOrIsZeroImpl::DescribeNegationTo&apos; can be static." verbose="The member function &apos;testing::gmock_matchers_test::ReferencesBarOrIsZeroImpl::DescribeNegationTo&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="test/gtest/src/gtest/googlemock/test/gmock-matchers_test.cc" line="540"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;testing::gmock_matchers_test::PolymorphicIsEvenImpl::DescribeTo&apos; can be static." verbose="The member function &apos;testing::gmock_matchers_test::PolymorphicIsEvenImpl::DescribeTo&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="test/gtest/src/gtest/googlemock/test/gmock-matchers_test.cc" line="571"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;testing::gmock_matchers_test::PolymorphicIsEvenImpl::DescribeNegationTo&apos; can be static." verbose="The member function &apos;testing::gmock_matchers_test::PolymorphicIsEvenImpl::DescribeNegationTo&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="test/gtest/src/gtest/googlemock/test/gmock-matchers_test.cc" line="573"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;testing::gmock_matchers_test::PolymorphicIsEvenImpl::MatchAndExplain&apos; can be static." verbose="The member function &apos;testing::gmock_matchers_test::PolymorphicIsEvenImpl::MatchAndExplain&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="test/gtest/src/gtest/googlemock/test/gmock-matchers_test.cc" line="578"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;testing::gmock_matchers_test::PolymorphicFunctor::operator()&apos; can be const." verbose="The member function &apos;testing::gmock_matchers_test::PolymorphicFunctor::operator()&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="test/gtest/src/gtest/googlemock/test/gmock-matchers_test.cc" line="4507"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;testing::gmock_matchers_test::PolymorphicFunctor::operator()&apos; can be const." verbose="The member function &apos;testing::gmock_matchers_test::PolymorphicFunctor::operator()&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="test/gtest/src/gtest/googlemock/test/gmock-matchers_test.cc" line="4508"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;testing::gmock_matchers_test::ReferencingFunctor::operator()&apos; can be const." verbose="The member function &apos;testing::gmock_matchers_test::ReferencingFunctor::operator()&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="test/gtest/src/gtest/googlemock/test/gmock-matchers_test.cc" line="4527"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;testing::gmock_matchers_test::IsHalfOfMatcher::DescribeTo&apos; can be static." verbose="The member function &apos;testing::gmock_matchers_test::IsHalfOfMatcher::DescribeTo&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="test/gtest/src/gtest/googlemock/test/gmock-matchers_test.cc" line="6265"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;testing::gmock_matchers_test::IsHalfOfMatcher::DescribeNegationTo&apos; can be static." verbose="The member function &apos;testing::gmock_matchers_test::IsHalfOfMatcher::DescribeNegationTo&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="test/gtest/src/gtest/googlemock/test/gmock-matchers_test.cc" line="6269"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;ConvertibleFromAny&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;ConvertibleFromAny&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="test/gtest/src/gtest/googlemock/test/gmock-matchers_test.cc" line="761"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &apos;IntReferenceWrapper&apos; has a constructor with 1 argument that is not explicit." verbose="Struct &apos;IntReferenceWrapper&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="test/gtest/src/gtest/googlemock/test/gmock-matchers_test.cc" line="792"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;SampleVariantIntString&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;SampleVariantIntString&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="test/gtest/src/gtest/googlemock/test/gmock-matchers_test.cc" line="6549"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;SampleVariantIntString&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;SampleVariantIntString&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="test/gtest/src/gtest/googlemock/test/gmock-matchers_test.cc" line="6550"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;testing::gmock_more_actions_test::NullaryFunctor::operator()&apos; can be const." verbose="The member function &apos;testing::gmock_more_actions_test::NullaryFunctor::operator()&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="test/gtest/src/gtest/googlemock/test/gmock-more-actions_test.cc" line="80"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;testing::gmock_more_actions_test::VoidNullaryFunctor::operator()&apos; can be const." verbose="The member function &apos;testing::gmock_more_actions_test::VoidNullaryFunctor::operator()&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="test/gtest/src/gtest/googlemock/test/gmock-more-actions_test.cc" line="88"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;testing::gmock_more_actions_test::UnaryFunctor::operator()&apos; can be const." verbose="The member function &apos;testing::gmock_more_actions_test::UnaryFunctor::operator()&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="test/gtest/src/gtest/googlemock/test/gmock-more-actions_test.cc" line="105"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;testing::gmock_more_actions_test::SumOf5Functor::operator()&apos; can be const." verbose="The member function &apos;testing::gmock_more_actions_test::SumOf5Functor::operator()&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="test/gtest/src/gtest/googlemock/test/gmock-more-actions_test.cc" line="130"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;testing::gmock_more_actions_test::SumOf6Functor::operator()&apos; can be const." verbose="The member function &apos;testing::gmock_more_actions_test::SumOf6Functor::operator()&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="test/gtest/src/gtest/googlemock/test/gmock-more-actions_test.cc" line="145"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;testing::gmock_more_actions_test::Foo::Unary&apos; can be const." verbose="The member function &apos;testing::gmock_more_actions_test::Foo::Unary&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="test/gtest/src/gtest/googlemock/test/gmock-more-actions_test.cc" line="186"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;testing::gmock_more_actions_test::Foo::Binary&apos; can be static." verbose="The member function &apos;testing::gmock_more_actions_test::Foo::Binary&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="test/gtest/src/gtest/googlemock/test/gmock-more-actions_test.cc" line="188"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;testing::gmock_more_actions_test::Foo::Ternary&apos; can be const." verbose="The member function &apos;testing::gmock_more_actions_test::Foo::Ternary&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="test/gtest/src/gtest/googlemock/test/gmock-more-actions_test.cc" line="190"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;testing::gmock_more_actions_test::Foo::SumOfLast2&apos; can be static." verbose="The member function &apos;testing::gmock_more_actions_test::Foo::SumOfLast2&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="test/gtest/src/gtest/googlemock/test/gmock-more-actions_test.cc" line="196"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;testing::gmock_more_actions_test::Foo::SumOf5&apos; can be static." verbose="The member function &apos;testing::gmock_more_actions_test::Foo::SumOf5&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="test/gtest/src/gtest/googlemock/test/gmock-more-actions_test.cc" line="198"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;testing::gmock_more_actions_test::Foo::SumOf6&apos; can be static." verbose="The member function &apos;testing::gmock_more_actions_test::Foo::SumOf6&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="test/gtest/src/gtest/googlemock/test/gmock-more-actions_test.cc" line="200"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;testing::gmock_more_actions_test::Foo::Concat7&apos; can be static." verbose="The member function &apos;testing::gmock_more_actions_test::Foo::Concat7&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="test/gtest/src/gtest/googlemock/test/gmock-more-actions_test.cc" line="204"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;testing::gmock_more_actions_test::Foo::Concat8&apos; can be static." verbose="The member function &apos;testing::gmock_more_actions_test::Foo::Concat8&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="test/gtest/src/gtest/googlemock/test/gmock-more-actions_test.cc" line="210"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;testing::gmock_more_actions_test::Foo::Concat9&apos; can be static." verbose="The member function &apos;testing::gmock_more_actions_test::Foo::Concat9&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="test/gtest/src/gtest/googlemock/test/gmock-more-actions_test.cc" line="216"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;testing::gmock_more_actions_test::Foo::Concat10&apos; can be static." verbose="The member function &apos;testing::gmock_more_actions_test::Foo::Concat10&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="test/gtest/src/gtest/googlemock/test/gmock-more-actions_test.cc" line="222"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;str_&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;str_&apos; a value by passing the value to the constructor in the initialization list.">
            <location file="test/gtest/src/gtest/googlemock/test/gmock-nice-strict_test.cc" line="100"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;testing::internal::ExpectationTester::SetCallCount&apos; can be static." verbose="The member function &apos;testing::internal::ExpectationTester::SetCallCount&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="test/gtest/src/gtest/googlemock/test/gmock-spec-builders_test.cc" line="55"/>
        </error>
        <error id="noConstructor" severity="style" msg="The class &apos;LeakChecker&apos; does not have a constructor." verbose="The class &apos;LeakChecker&apos; does not have a constructor although it has private member variables. Member variables of builtin types are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior.">
            <location file="test/gtest/src/gtest/googletest/samples/sample10_unittest.cc" line="75"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;::Water::operatordelete&apos; can be const." verbose="The member function &apos;::Water::operatordelete&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="test/gtest/src/gtest/googletest/samples/sample10_unittest.cc" line="58"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;GTEST_EXTRA_DEATH_TEST_COMMAND_LINE_ARGS_;GTEST_HAS_DEATH_TEST&apos; since the value of &apos;GTEST_EXTRA_DEATH_TEST_COMMAND_LINE_ARGS_&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;GTEST_EXTRA_DEATH_TEST_COMMAND_LINE_ARGS_;GTEST_HAS_DEATH_TEST&apos; since the value of &apos;GTEST_EXTRA_DEATH_TEST_COMMAND_LINE_ARGS_&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="test/gtest/src/gtest/googletest/src/gtest-death-test.cc" line="1"/>
        </error>
        <error id="autoVariables" severity="error" msg="Address of local auto-variable assigned to a function parameter." verbose="Dangerous assignment - the function parameter is assigned the address of a local auto-variable. Local auto-variables are reserved from the stack which is freed when the function ends. So the pointer to a local variable is invalid after the function ends.">
            <location file="test/gtest/src/gtest/googletest/src/gtest-death-test.cc" line="1004"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;GTEST_HAS_DEATH_TEST;GTEST_KILLED_BY_SIGNAL_OVERRIDE_&apos; since the value of &apos;GTEST_KILLED_BY_SIGNAL_OVERRIDE_&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;GTEST_HAS_DEATH_TEST;GTEST_KILLED_BY_SIGNAL_OVERRIDE_&apos; since the value of &apos;GTEST_KILLED_BY_SIGNAL_OVERRIDE_&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="test/gtest/src/gtest/googletest/src/gtest-death-test.cc" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;GTEST_HAS_DEATH_TEST;WCOREDUMP&apos; since the value of &apos;WCOREDUMP&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;GTEST_HAS_DEATH_TEST;WCOREDUMP&apos; since the value of &apos;WCOREDUMP&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="test/gtest/src/gtest/googletest/src/gtest-death-test.cc" line="1"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;result&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;result&apos; is reassigned a value before the old one has been used.">
            <location file="test/gtest/src/gtest/googletest/src/gtest-filepath.cc" line="242"/>
            <location file="test/gtest/src/gtest/googletest/src/gtest-filepath.cc" line="222"/>
        </error>
        <error id="duplicateBreak" severity="style" msg="Consecutive return, break, continue, goto or throw statements are unnecessary." verbose="Consecutive return, break, continue, goto or throw statements are unnecessary. The second statement can never be executed, and so should be removed." inconclusive="true">
            <location file="test/gtest/src/gtest/googletest/src/gtest-filepath.cc" line="114"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;GTEST_GET_BOOL_FROM_ENV_&apos; since the value of &apos;GTEST_GET_BOOL_FROM_ENV_&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;GTEST_GET_BOOL_FROM_ENV_&apos; since the value of &apos;GTEST_GET_BOOL_FROM_ENV_&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="test/gtest/src/gtest/googletest/src/gtest-port.cc" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;GTEST_GET_INT32_FROM_ENV_&apos; since the value of &apos;GTEST_GET_INT32_FROM_ENV_&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;GTEST_GET_INT32_FROM_ENV_&apos; since the value of &apos;GTEST_GET_INT32_FROM_ENV_&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="test/gtest/src/gtest/googletest/src/gtest-port.cc" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;GTEST_GET_STRING_FROM_ENV_&apos; since the value of &apos;GTEST_GET_STRING_FROM_ENV_&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;GTEST_GET_STRING_FROM_ENV_&apos; since the value of &apos;GTEST_GET_STRING_FROM_ENV_&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="test/gtest/src/gtest/googletest/src/gtest-port.cc" line="1"/>
        </error>
        <error id="nullPointer" severity="error" msg="Possible null pointer dereference: xmlout" verbose="Possible null pointer dereference: xmlout">
            <location file="test/gtest/src/gtest/googletest/src/gtest.cc" line="3502"/>
        </error>
        <error id="nullPointer" severity="error" msg="Possible null pointer dereference: xmlout" verbose="Possible null pointer dereference: xmlout">
            <location file="test/gtest/src/gtest/googletest/src/gtest.cc" line="3503"/>
        </error>
        <error id="nullPointer" severity="error" msg="Possible null pointer dereference: jsonout" verbose="Possible null pointer dereference: jsonout">
            <location file="test/gtest/src/gtest/googletest/src/gtest.cc" line="3908"/>
        </error>
        <error id="nullPointer" severity="error" msg="Possible null pointer dereference: jsonout" verbose="Possible null pointer dereference: jsonout">
            <location file="test/gtest/src/gtest/googletest/src/gtest.cc" line="3909"/>
        </error>
        <error id="stlcstrParam" severity="performance" msg="Passing the result of c_str() to a function that takes std::string as argument no. 1 is slow and redundant." verbose="The conversion from const char* as returned by c_str() to std::string creates an unnecessary string copy. Solve that by directly passing the string.">
            <location file="test/gtest/src/gtest/googletest/src/gtest.cc" line="3706"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;GTEST_CUSTOM_GET_ARGVS_&apos; since the value of &apos;GTEST_CUSTOM_GET_ARGVS_&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;GTEST_CUSTOM_GET_ARGVS_&apos; since the value of &apos;GTEST_CUSTOM_GET_ARGVS_&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="test/gtest/src/gtest/googletest/src/gtest.cc" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_&apos; since the value of &apos;GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_&apos; since the value of &apos;GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="test/gtest/src/gtest/googletest/src/gtest.cc" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;GTEST_CUSTOM_TEMPDIR_FUNCTION_&apos; since the value of &apos;GTEST_CUSTOM_TEMPDIR_FUNCTION_&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;GTEST_CUSTOM_TEMPDIR_FUNCTION_&apos; since the value of &apos;GTEST_CUSTOM_TEMPDIR_FUNCTION_&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="test/gtest/src/gtest/googletest/src/gtest.cc" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;GTEST_CUSTOM_TEST_EVENT_LISTENER_&apos; since the value of &apos;GTEST_CUSTOM_TEST_EVENT_LISTENER_&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;GTEST_CUSTOM_TEST_EVENT_LISTENER_&apos; since the value of &apos;GTEST_CUSTOM_TEST_EVENT_LISTENER_&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="test/gtest/src/gtest/googletest/src/gtest.cc" line="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;GTEST_EXTRA_DEATH_TEST_CHILD_SETUP_;GTEST_HAS_DEATH_TEST&apos; since the value of &apos;GTEST_EXTRA_DEATH_TEST_CHILD_SETUP_&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;GTEST_EXTRA_DEATH_TEST_CHILD_SETUP_;GTEST_HAS_DEATH_TEST&apos; since the value of &apos;GTEST_EXTRA_DEATH_TEST_CHILD_SETUP_&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="test/gtest/src/gtest/googletest/src/gtest.cc" line="1"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;in_subprocess_for_death_test&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;in_subprocess_for_death_test&apos; is reassigned a value before the old one has been used.">
            <location file="test/gtest/src/gtest/googletest/src/gtest.cc" line="4976"/>
            <location file="test/gtest/src/gtest/googletest/src/gtest.cc" line="4973"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;GTEST_OS_STACK_TRACE_GETTER_&apos; since the value of &apos;GTEST_OS_STACK_TRACE_GETTER_&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;GTEST_OS_STACK_TRACE_GETTER_&apos; since the value of &apos;GTEST_OS_STACK_TRACE_GETTER_&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="test/gtest/src/gtest/googletest/src/gtest.cc" line="1"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;now_int64&apos; can be reduced." verbose="The scope of the variable &apos;now_int64&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="test/gtest/src/gtest/googletest/src/gtest.cc" line="829"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;GTEST_TEST_FILTER_ENV_VAR_&apos; since the value of &apos;GTEST_TEST_FILTER_ENV_VAR_&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;GTEST_TEST_FILTER_ENV_VAR_&apos; since the value of &apos;GTEST_TEST_FILTER_ENV_VAR_&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="test/gtest/src/gtest/googletest/src/gtest.cc" line="1"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;TestForDeathTest::should_die_&apos; is not initialized in the constructor." verbose="Member variable &apos;TestForDeathTest::should_die_&apos; is not initialized in the constructor.">
            <location file="test/gtest/src/gtest/googletest/test/gtest-death-test_test.cc" line="125"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;MockDeathTestFactory::test_deleted_&apos; is not initialized in the constructor." verbose="Member variable &apos;MockDeathTestFactory::test_deleted_&apos; is not initialized in the constructor.">
            <location file="test/gtest/src/gtest/googletest/test/gtest-death-test_test.cc" line="964"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &apos;gen&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;gen&apos; is reassigned a value before the old one has been used.">
            <location file="test/gtest/src/gtest/googletest/test/gtest-param-test_test.cc" line="591"/>
            <location file="test/gtest/src/gtest/googletest/test/gtest-param-test_test.cc" line="589"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;DogAdder::operator=&apos; should return &apos;DogAdder &amp;&apos;." verbose="The DogAdder::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;DogAdder &amp;DogAdder::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="test/gtest/src/gtest/googletest/test/gtest-param-test_test.cc" line="264"/>
        </error>
        <error id="operatorEq" severity="style" msg="&apos;IntWrapper::operator=&apos; should return &apos;IntWrapper &amp;&apos;." verbose="The IntWrapper::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;IntWrapper &amp;IntWrapper::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.">
            <location file="test/gtest/src/gtest/googletest/test/gtest-param-test_test.cc" line="302"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;CustomParamNameFunctor::operator()&apos; can be const." verbose="The member function &apos;CustomParamNameFunctor::operator()&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="test/gtest/src/gtest/googletest/test/gtest-param-test_test.cc" line="887"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;NonDefaultConstructAssignString&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;NonDefaultConstructAssignString&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="test/gtest/src/gtest/googletest/test/gtest-param-test_test.cc" line="543"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;testing::internal::Base::member&apos; can be const." verbose="The member function &apos;testing::internal::Base::member&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="test/gtest/src/gtest/googletest/test/gtest-port_test.cc" line="100"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;To&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;To&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="test/gtest/src/gtest/googletest/test/gtest-port_test.cc" line="196"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;GTEST_USES_SIMPLE_RE&apos; since the value of &apos;GTEST_USES_SIMPLE_RE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;GTEST_USES_SIMPLE_RE&apos; since the value of &apos;GTEST_USES_SIMPLE_RE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="test/gtest/src/gtest/googletest/test/gtest-port_test.cc" line="1"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;foo::PathLike::begin&apos; can be static." verbose="The member function &apos;foo::PathLike::begin&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="test/gtest/src/gtest/googletest/test/gtest-printers_test.cc" line="201"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;foo::PathLike::end&apos; can be static." verbose="The member function &apos;foo::PathLike::end&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="test/gtest/src/gtest/googletest/test/gtest-printers_test.cc" line="202"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;testing::gtest_printers_test::Foo::MyMethod&apos; can be static." verbose="The member function &apos;testing::gtest_printers_test::Foo::MyMethod&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="test/gtest/src/gtest/googletest/test/gtest-printers_test.cc" line="566"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;testing::internal::LessByName::operator()&apos; can be const." verbose="The member function &apos;testing::internal::LessByName::operator()&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="test/gtest/src/gtest/googletest/test/gtest-unittest-api_test.cc" line="48"/>
        </error>
        <error id="incorrectLogicOperator" severity="warning" msg="Logical disjunction always evaluates to true: dummy||!dummy." verbose="Logical disjunction always evaluates to true: dummy||!dummy. Are these conditions necessary? Did you intend to use &amp;&amp; instead? Are the numbers correct? Are you comparing the correct variables?">
            <location file="test/gtest/src/gtest/googletest/test/gtest_unittest.cc" line="56"/>
        </error>
        <error id="noConstructor" severity="style" msg="The class &apos;FormatEpochTimeInMillisAsIso8601Test&apos; does not have a constructor." verbose="The class &apos;FormatEpochTimeInMillisAsIso8601Test&apos; does not have a constructor although it has private member variables. Member variables of builtin types are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior.">
            <location file="test/gtest/src/gtest/googletest/test/gtest_unittest.cc" line="411"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;PredFunctor1::operator()&apos; can be const." verbose="The member function &apos;PredFunctor1::operator()&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="test/gtest/src/gtest/googletest/test/gtest_pred_impl_unittest.cc" line="94"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;PredFunctor2::operator()&apos; can be const." verbose="The member function &apos;PredFunctor2::operator()&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="test/gtest/src/gtest/googletest/test/gtest_pred_impl_unittest.cc" line="481"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;PredFunctor3::operator()&apos; can be const." verbose="The member function &apos;PredFunctor3::operator()&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="test/gtest/src/gtest/googletest/test/gtest_pred_impl_unittest.cc" line="910"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;PredFunctor4::operator()&apos; can be const." verbose="The member function &apos;PredFunctor4::operator()&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="test/gtest/src/gtest/googletest/test/gtest_pred_impl_unittest.cc" line="1381"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;PredFunctor5::operator()&apos; can be const." verbose="The member function &apos;PredFunctor5::operator()&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="test/gtest/src/gtest/googletest/test/gtest_pred_impl_unittest.cc" line="1894"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;::IsEvenFunctor::operator()&apos; can be const." verbose="The member function &apos;::IsEvenFunctor::operator()&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="test/gtest/src/gtest/googletest/test/gtest_unittest.cc" line="2115"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;::AssertIsEvenFunctor::operator()&apos; can be const." verbose="The member function &apos;::AssertIsEvenFunctor::operator()&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="test/gtest/src/gtest/googletest/test/gtest_unittest.cc" line="2152"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;::SumIsEven3Functor::operator()&apos; can be const." verbose="The member function &apos;::SumIsEven3Functor::operator()&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="test/gtest/src/gtest/googletest/test/gtest_unittest.cc" line="2165"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;::AssertSumIsEven5Functor::operator()&apos; can be const." verbose="The member function &apos;::AssertSumIsEven5Functor::operator()&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="test/gtest/src/gtest/googletest/test/gtest_unittest.cc" line="2190"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;::Foo::Bar&apos; can be static." verbose="The member function &apos;::Foo::Bar&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?" inconclusive="true">
            <location file="test/gtest/src/gtest/googletest/test/gtest_unittest.cc" line="5005"/>
        </error>
        <error id="reademptycontainer" severity="style" msg="Reading from empty STL container &apos;vec&apos;" verbose="Reading from empty STL container &apos;vec&apos;" inconclusive="true">
            <location file="test/gtest/src/gtest/googletest/test/gtest_unittest.cc" line="7115"/>
        </error>
        <error id="reademptycontainer" severity="style" msg="Reading from empty STL container &apos;vec&apos;" verbose="Reading from empty STL container &apos;vec&apos;" inconclusive="true">
            <location file="test/gtest/src/gtest/googletest/test/gtest_unittest.cc" line="7116"/>
        </error>
        <error id="reademptycontainer" severity="style" msg="Reading from empty STL container &apos;vec&apos;" verbose="Reading from empty STL container &apos;vec&apos;" inconclusive="true">
            <location file="test/gtest/src/gtest/googletest/test/gtest_unittest.cc" line="7117"/>
        </error>
        <error id="reademptycontainer" severity="style" msg="Reading from empty STL container &apos;vec&apos;" verbose="Reading from empty STL container &apos;vec&apos;" inconclusive="true">
            <location file="test/gtest/src/gtest/googletest/test/gtest_unittest.cc" line="7118"/>
        </error>
        <error id="reademptycontainer" severity="style" msg="Reading from empty STL container &apos;vec&apos;" verbose="Reading from empty STL container &apos;vec&apos;" inconclusive="true">
            <location file="test/gtest/src/gtest/googletest/test/gtest_unittest.cc" line="7123"/>
        </error>
        <error id="reademptycontainer" severity="style" msg="Reading from empty STL container &apos;vec&apos;" verbose="Reading from empty STL container &apos;vec&apos;" inconclusive="true">
            <location file="test/gtest/src/gtest/googletest/test/gtest_unittest.cc" line="7124"/>
        </error>
        <error id="reademptycontainer" severity="style" msg="Reading from empty STL container &apos;vec&apos;" verbose="Reading from empty STL container &apos;vec&apos;" inconclusive="true">
            <location file="test/gtest/src/gtest/googletest/test/gtest_unittest.cc" line="7125"/>
        </error>
        <error id="reademptycontainer" severity="style" msg="Reading from empty STL container &apos;vec&apos;" verbose="Reading from empty STL container &apos;vec&apos;" inconclusive="true">
            <location file="test/gtest/src/gtest/googletest/test/gtest_unittest.cc" line="7126"/>
        </error>
        <error id="reademptycontainer" severity="style" msg="Reading from empty STL container &apos;vec&apos;" verbose="Reading from empty STL container &apos;vec&apos;" inconclusive="true">
            <location file="test/gtest/src/gtest/googletest/test/gtest_unittest.cc" line="7131"/>
        </error>
        <error id="reademptycontainer" severity="style" msg="Reading from empty STL container &apos;vec&apos;" verbose="Reading from empty STL container &apos;vec&apos;" inconclusive="true">
            <location file="test/gtest/src/gtest/googletest/test/gtest_unittest.cc" line="7132"/>
        </error>
        <error id="reademptycontainer" severity="style" msg="Reading from empty STL container &apos;vec&apos;" verbose="Reading from empty STL container &apos;vec&apos;" inconclusive="true">
            <location file="test/gtest/src/gtest/googletest/test/gtest_unittest.cc" line="7133"/>
        </error>
        <error id="reademptycontainer" severity="style" msg="Reading from empty STL container &apos;vec&apos;" verbose="Reading from empty STL container &apos;vec&apos;" inconclusive="true">
            <location file="test/gtest/src/gtest/googletest/test/gtest_unittest.cc" line="7134"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code.">
            <location file="test/gtest/src/gtest/googletest/test/gtest_unittest.cc" line="7703"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: b" verbose="Unused variable: b">
            <location file="test/gtest/src/gtest/googletest/test/gtest_unittest.cc" line="7637"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: b" verbose="Unused variable: b">
            <location file="test/gtest/src/gtest/googletest/test/gtest_unittest.cc" line="7650"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;GTEST_USES_SIMPLE_RE&apos; since the value of &apos;GTEST_USES_SIMPLE_RE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;GTEST_USES_SIMPLE_RE&apos; since the value of &apos;GTEST_USES_SIMPLE_RE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="test/gtest/src/gtest/googletest/test/gtest_all_test.cc" line="1"/>
        </error>
        <error id="exceptThrowInDestructor" severity="warning" msg="Class CxxExceptionInDestructorTest is not safe, destructor throws exception" verbose="The class CxxExceptionInDestructorTest is not safe because its destructor throws an exception. If CxxExceptionInDestructorTest is used and an exception is thrown that is caught in an outer scope the program will terminate.">
            <location file="test/gtest/src/gtest/googletest/test/gtest_catch_exceptions_test_.cc" line="153"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;AssumeRole&apos; is never used." verbose="The function &apos;AssumeRole&apos; is never used.">
            <location file="test/gtest/src/gtest/googletest/src/gtest-death-test.cc" line="835"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ByNonConstRef&apos; is never used." verbose="The function &apos;ByNonConstRef&apos; is never used.">
            <location file="test/gtest/src/gtest/googlemock/test/gmock-generated-actions_test.cc" line="89"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ClearInjectableArgvs&apos; is never used." verbose="The function &apos;ClearInjectableArgvs&apos; is never used.">
            <location file="test/gtest/src/gtest/googletest/src/gtest-port.cc" line="1110"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;CmpHelperEQ&apos; is never used." verbose="The function &apos;CmpHelperEQ&apos; is never used.">
            <location file="test/gtest/src/gtest/googletest/src/gtest.cc" line="1451"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;CmpHelperGE&apos; is never used." verbose="The function &apos;CmpHelperGE&apos; is never used.">
            <location file="test/gtest/src/gtest/googletest/src/gtest.cc" line="1493"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;CmpHelperGT&apos; is never used." verbose="The function &apos;CmpHelperGT&apos; is never used.">
            <location file="test/gtest/src/gtest/googletest/src/gtest.cc" line="1496"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;CmpHelperLE&apos; is never used." verbose="The function &apos;CmpHelperLE&apos; is never used.">
            <location file="test/gtest/src/gtest/googletest/src/gtest.cc" line="1487"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;CmpHelperLT&apos; is never used." verbose="The function &apos;CmpHelperLT&apos; is never used.">
            <location file="test/gtest/src/gtest/googletest/src/gtest.cc" line="1490"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;CmpHelperNE&apos; is never used." verbose="The function &apos;CmpHelperNE&apos; is never used.">
            <location file="test/gtest/src/gtest/googletest/src/gtest.cc" line="1484"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;CmpHelperSTRCASEEQ&apos; is never used." verbose="The function &apos;CmpHelperSTRCASEEQ&apos; is never used.">
            <location file="test/gtest/src/gtest/googletest/src/gtest.cc" line="1517"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;CmpHelperSTRCASENE&apos; is never used." verbose="The function &apos;CmpHelperSTRCASENE&apos; is never used.">
            <location file="test/gtest/src/gtest/googletest/src/gtest.cc" line="1547"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;CmpHelperSTREQ&apos; is never used." verbose="The function &apos;CmpHelperSTREQ&apos; is never used.">
            <location file="test/gtest/src/gtest/googletest/src/gtest.cc" line="1501"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;CmpHelperSTRNE&apos; is never used." verbose="The function &apos;CmpHelperSTRNE&apos; is never used.">
            <location file="test/gtest/src/gtest/googletest/src/gtest.cc" line="1533"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;CreatePrimeTable&lt;OnTheFlyPrimeTable&gt;&apos; is never used." verbose="The function &apos;CreatePrimeTable&lt;OnTheFlyPrimeTable&gt;&apos; is never used.">
            <location file="test/gtest/src/gtest/googletest/samples/sample6_unittest.cc" line="48"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;CreatePrimeTable&lt;PreCalculatedPrimeTable&gt;&apos; is never used." verbose="The function &apos;CreatePrimeTable&lt;PreCalculatedPrimeTable&gt;&apos; is never used.">
            <location file="test/gtest/src/gtest/googletest/samples/sample6_unittest.cc" line="53"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;DoubleNearPredFormat&apos; is never used." verbose="The function &apos;DoubleNearPredFormat&apos; is never used.">
            <location file="test/gtest/src/gtest/googletest/src/gtest.cc" line="1376"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;EditsToString&apos; is never used." verbose="The function &apos;EditsToString&apos; is never used.">
            <location file="test/gtest/src/gtest/googletest/test/gtest_unittest.cc" line="3449"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;EscapeXmlText&apos; is never used." verbose="The function &apos;EscapeXmlText&apos; is never used.">
            <location file="test/gtest/src/gtest/googletest/src/gtest.cc" line="3424"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ExitedUnsuccessfully&apos; is never used." verbose="The function &apos;ExitedUnsuccessfully&apos; is never used.">
            <location file="test/gtest/src/gtest/googletest/src/gtest-death-test.cc" line="215"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;GetBoolAssertionFailureMessage&apos; is never used." verbose="The function &apos;GetBoolAssertionFailureMessage&apos; is never used.">
            <location file="test/gtest/src/gtest/googletest/src/gtest.cc" line="1360"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;GetCurrentOsStackTraceExceptTop&apos; is never used." verbose="The function &apos;GetCurrentOsStackTraceExceptTop&apos; is never used.">
            <location file="test/gtest/src/gtest/googletest/src/gtest.cc" line="5386"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;IllegalDoDefault&apos; is never used." verbose="The function &apos;IllegalDoDefault&apos; is never used.">
            <location file="test/gtest/src/gtest/googlemock/src/gmock-internal-utils.cc" line="191"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;IsHRESULTFailure&apos; is never used." verbose="The function &apos;IsHRESULTFailure&apos; is never used.">
            <location file="test/gtest/src/gtest/googletest/src/gtest.cc" line="1725"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;IsHRESULTSuccess&apos; is never used." verbose="The function &apos;IsHRESULTSuccess&apos; is never used.">
            <location file="test/gtest/src/gtest/googletest/src/gtest.cc" line="1718"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;IsTypeOf&apos; is never used." verbose="The function &apos;IsTypeOf&apos; is never used.">
            <location file="test/gtest/src/gtest/googlemock/test/gmock-matchers_test.cc" line="1066"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;MakeAndRegisterTestInfo&apos; is never used." verbose="The function &apos;MakeAndRegisterTestInfo&apos; is never used.">
            <location file="test/gtest/src/gtest/googletest/src/gtest.cc" line="2560"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ParseInternalRunDeathTestFlag&apos; is never used." verbose="The function &apos;ParseInternalRunDeathTestFlag&apos; is never used.">
            <location file="test/gtest/src/gtest/googletest/src/gtest-death-test.cc" line="1298"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;PrintBytesInObjectTo&apos; is never used." verbose="The function &apos;PrintBytesInObjectTo&apos; is never used.">
            <location file="test/gtest/src/gtest/googletest/src/gtest-printers.cc" line="115"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;PrintStringTo&apos; is never used." verbose="The function &apos;PrintStringTo&apos; is never used.">
            <location file="test/gtest/src/gtest/googletest/src/gtest-printers.cc" line="435"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;PrintWideStringTo&apos; is never used." verbose="The function &apos;PrintWideStringTo&apos; is never used.">
            <location file="test/gtest/src/gtest/googletest/src/gtest-printers.cc" line="445"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ReportFailure&apos; is never used." verbose="The function &apos;ReportFailure&apos; is never used.">
            <location file="test/gtest/src/gtest/googlemock/src/gmock-internal-utils.cc" line="97"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ReportInvalidTestCaseType&apos; is never used." verbose="The function &apos;ReportInvalidTestCaseType&apos; is never used.">
            <location file="test/gtest/src/gtest/googletest/src/gtest.cc" line="2577"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;Send&apos; is never used." verbose="The function &apos;Send&apos; is never used.">
            <location file="test/gtest/src/gtest/googletest/test/gtest_unittest.cc" line="84"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;SetCallCount&apos; is never used." verbose="The function &apos;SetCallCount&apos; is never used.">
            <location file="test/gtest/src/gtest/googlemock/test/gmock-spec-builders_test.cc" line="55"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;SetUpTestCase&apos; is never used." verbose="The function &apos;SetUpTestCase&apos; is never used.">
            <location file="test/gtest/src/gtest/googletest/test/gtest-death-test_test.cc" line="1017"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;TearDownTestCase&apos; is never used." verbose="The function &apos;TearDownTestCase&apos; is never used.">
            <location file="test/gtest/src/gtest/googletest/test/gtest-death-test_test.cc" line="1022"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;UniversalPrintArray&apos; is never used." verbose="The function &apos;UniversalPrintArray&apos; is never used.">
            <location file="test/gtest/src/gtest/googletest/src/gtest-printers.cc" line="319"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;VoidFunctionWithFourArguments&apos; is never used." verbose="The function &apos;VoidFunctionWithFourArguments&apos; is never used.">
            <location file="test/gtest/src/gtest/googlemock/test/gmock-more-actions_test.cc" line="120"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;VoidTernary&apos; is never used." verbose="The function &apos;VoidTernary&apos; is never used.">
            <location file="test/gtest/src/gtest/googlemock/test/gmock-generated-actions_test.cc" line="101"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;VoidUnary&apos; is never used." verbose="The function &apos;VoidUnary&apos; is never used.">
            <location file="test/gtest/src/gtest/googlemock/test/gmock-more-actions_test.cc" line="95"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;Wait&apos; is never used." verbose="The function &apos;Wait&apos; is never used.">
            <location file="test/gtest/src/gtest/googletest/src/gtest-death-test.cc" line="812"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;_rmdir&apos; is never used." verbose="The function &apos;_rmdir&apos; is never used.">
            <location file="test/gtest/src/gtest/googletest/test/gtest-filepath_test.cc" line="65"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;gmock_main&apos; is never used." verbose="The function &apos;gmock_main&apos; is never used.">
            <location file="test/gtest/src/gtest/googlemock/test/gmock-spec-builders_test.cc" line="2688"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;operatorDestinationType&apos; is never used." verbose="The function &apos;operatorDestinationType&apos; is never used.">
            <location file="test/gtest/src/gtest/googlemock/test/gmock-actions_test.cc" line="623"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;operatordelete&apos; is never used." verbose="The function &apos;operatordelete&apos; is never used.">
            <location file="test/gtest/src/gtest/googletest/samples/sample10_unittest.cc" line="58"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;operatornew&apos; is never used." verbose="The function &apos;operatornew&apos; is never used.">
            <location file="test/gtest/src/gtest/googletest/samples/sample10_unittest.cc" line="53"/>
        </error>
        <error id="missingInclude" severity="information" msg="Cppcheck cannot find all the include files (use --check-config for details)" verbose="Cppcheck cannot find all the include files. Cppcheck can check the code without the include files found. But the results will probably be more accurate if all the include files are found. Please check your project&apos;s include directories and add all of them as include directories for Cppcheck. To see what files Cppcheck cannot find use --check-config."/>
    </errors>
</results>
